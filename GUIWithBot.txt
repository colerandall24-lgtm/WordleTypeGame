import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Set;

public class GUIWindow extends JFrame {
    private JPanel frame;
    private ColorPanel[] alphabetPanels;
    private JPanel alphabetPanel;
    private int size;
    private ColorPanel[][] colorPanel;
    private JPanel buttonPanel;
    private Wordle wordle;
    private JLabel messageLabel;
    private JButton startButton;
    private String guess;
    private Set<String> greenChars;
    private Set<String> yellowChars;
    private int guesses;
    private int wins;
    private WordleBot bot;
    private JFrame botFrame;
    private JLabel botLabel;

    public static void main(String[] args) throws FileNotFoundException {
        new GUIWindow();
    }

    public GUIWindow() throws FileNotFoundException {
        //initialize the game
        //wordle = new Wordle("hello");//set the word to guess as hello
        wordle = new Wordle();
        size = wordle.getSize();
        yellowChars = new HashSet<>();
        greenChars = new HashSet<>();
        alphabetPanel = new JPanel(new GridLayout());
        guesses = 0;
        wins = 0;
        guess = "";

        //bot stuff
        bot = new WordleBot(wordle);
        botFrame = new JFrame("Wordle Bot");
        botFrame.setLayout(new BorderLayout());
        botLabel = new JLabel("Suggested Guess ADIEU");
        botLabel.setHorizontalAlignment(SwingConstants.CENTER);
        botLabel.setVerticalAlignment(SwingConstants.CENTER);

        botFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        botFrame.add(botLabel, BorderLayout.CENTER);
        botFrame.setSize(300, 300);
        botFrame.setResizable(false);
        botFrame.setLocationRelativeTo(null);
        botFrame.setVisible(true);





        //initialize the graphics
        this.setTitle("Wordle");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        startButton = new JButton("Restart");
        startButton.addActionListener(new startListener());
        startButton.setVisible(false);

        alphabetPanels = new ColorPanel[26];
        String alphabetSTR = "abcdefghijklmnopqrstuvwxyz";
        for (int i = 0; i < alphabetSTR.length(); i++) {
            alphabetPanels[i] = new ColorPanel(Color.lightGray, this, alphabetSTR.substring(i, i + 1));
        }

        //the commented out code below puts the alphabet at the top of the game in the order
        //shown on a keyboard

        /*String alphabetSTR = "qwertyuiopasdfghjklzxcvbnm";
        for(int i = 0; i < alphabetSTR.length(); i++){
            alphabetPanels[i] = new ColorPanel(Color.lightGray, this, alphabetSTR.substring(i, i+1));
        }*/

        messageLabel = new JLabel("");
        messageLabel.setFont(new Font("Lobster", Font.PLAIN, 20));//TODO
        messageLabel.setForeground(Color.RED);
        messageLabel.setHorizontalAlignment(JLabel.CENTER);
        frame = new JPanel(new GridLayout(wordle.getNumGuesses(), wordle.getWord().length()));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new BoxLayout(buttonPanel, BoxLayout.Y_AXIS));
        buttonPanel.setBackground(new Color(150, 250, 150));


        colorPanel = new ColorPanel[wordle.getNumGuesses()][wordle.getWord().length()];

        //fill the board with new light gray color panels
        for(int i = 0; i < wordle.getNumGuesses(); i++){
            for(int j = 0; j < wordle.getWord().length(); j++){
                colorPanel[i][j] = new ColorPanel(Color.LIGHT_GRAY, this);
            }
        }
        //add the board to the frame
        for(int i = 0; i < colorPanel.length; i++){
            for(int j = 0; j < colorPanel[0].length; j++){
                frame.add(colorPanel[i][j]);
            }
        }
        //add the available letters to the bar of letters at the top
        for(int i = 0; i < alphabetPanels.length; i++){
            alphabetPanel.add(alphabetPanels[i]);
        }
        //add buttons for guessing to the button panel
        buttonPanel.add(Box.createVerticalStrut(5));
        buttonPanel.add(Box.createVerticalStrut(5));
        buttonPanel.add(messageLabel);
        buttonPanel.add(startButton, BorderLayout.SOUTH);


        this.addKeyListener(new KeyBoardListener());
        this.setFocusable(true);
        this.requestFocusInWindow();

        //add the frame to the content pane and create the window
        frame.setBorder(BorderFactory.createLineBorder(new Color(80, 80, 80), 30));
        Container pane = getContentPane();
        pane.add(frame, BorderLayout.CENTER);
        pane.add(buttonPanel, BorderLayout.SOUTH);
        pane.add(alphabetPanel, BorderLayout.NORTH);
        this.setResizable(false);
        this.pack();
        this.setSize(550, 770);
        this.setVisible(true);
        resetAllPanels();
    }


    /**
     * reset the game pick a new word and reset the number of guesses
     */
    private void resetAllPanels() throws FileNotFoundException {
        for(int i = 0; i < colorPanel.length; i++){
            for(int j = 0; j < colorPanel[0].length; j++){
                colorPanel[i][j].setColor(Color.LIGHT_GRAY);
                colorPanel[i][j].setLabel("");
            }
        }
        for (ColorPanel panel : alphabetPanels) {
            panel.setColor(Color.LIGHT_GRAY);
        }
        greenChars.clear();
        bot = new WordleBot(wordle);
        botLabel.setText("Suggested Guess ADIEU");
        yellowChars.clear();
        guesses = 0;
        guess = "";
        repaint();
    }

    /**
     * transfer the board pattern from the wordle game into the color panels
     * @param pattern the pattern given by the wordle game
     */
    private void setColorPanel(int[] pattern){
        for(int i = 0; i < colorPanel[0].length; i++){
            if(pattern[i] == 2) {
                colorPanel[size-1][i].setColor(Color.GREEN);
                colorPanel[size-1][i].setLabel(guess.substring(i, i+1));
            }
            else if(pattern[i] == 1) {
                colorPanel[size-1][i].setColor(Color.YELLOW);
                colorPanel[size-1][i].setLabel(guess.substring(i, i+1));
            }
            else if(pattern[i] == 0) {
                colorPanel[size-1][i].setColor(Color.DARK_GRAY);
                colorPanel[size-1][i].setLabel(guess.substring(i, i+1));
            }
        }
    }

    private void setColorPanel(String guess){
        if (guesses >= colorPanel.length) {
            return;
        }
        while (guess.length() < colorPanel[0].length) {
            guess = guess + " ";
        }
        for (int i = 0; i < colorPanel[0].length; i++) {
            colorPanel[guesses][i].setLabel(guess.substring(i, i + 1));
        }
        repaint();
    }

    /**
     * Records a guess using the wordle game and updates the color panels
     * @param word word that is being guessed
     */
    private void guess(String word){
        if (word.length() != wordle.getWord().length()) {
            messageLabel.setText("Guess must be 5 letters!");
        }
        else {
            this.guess = word;
            try {
                int[] pattern = wordle.recordGuess(word);
                size = wordle.getSize();
                setColorPanel(pattern);
                messageLabel.setText("");
                setAlphabet();
                guesses++;
                String nextBotGuess = bot.generateWord(pattern, guess);
                botLabel.setText("Suggested Guess: " + nextBotGuess);
                repaint();
            } catch (IllegalArgumentException e) {
                messageLabel.setText(e.getMessage());
            }

            if(wordle.gameOver()){
                if(wordle.won(size-1)) {
                    wins++;
                    String message =  "You Won in " + guesses + " guesses!\nYou have won " + wins + " times in a row";
                    JOptionPane.showMessageDialog(this, message);
                    showNewGameButton(true);
                }
                else{
                    JOptionPane.showMessageDialog(this, "You lost!\nThe correct word was " + wordle.getWord());
                    showNewGameButton(true);
                    wins = 0;
                }
            }
        }
    }

    /**
     * updates the letters on the top after a guess
     */
    public void setAlphabet(){
        for(int i = 0; i < colorPanel[0].length; i++){
            int col = colorPanel[size - 1][i].getColor();
            if(col == 2) {
                greenChars.add(colorPanel[size-1][i].getTitle());
            }
            else if(col == 1) {
                yellowChars.add(colorPanel[size-1][i].getTitle());
            }
        }
        for(int i = 0; i < alphabetPanels.length; i++){
            if(greenChars.contains(alphabetPanels[i].getTitle())){
                alphabetPanels[i].setColor(Color.GREEN);
            }
            else if(yellowChars.contains(alphabetPanels[i].getTitle())){
                alphabetPanels[i].setColor(Color.YELLOW);
            }
        }
        for(int i = 0; i < alphabetPanels.length; i++){
            if(guess.contains(alphabetPanels[i].getTitle()) && !yellowChars.contains(alphabetPanels[i].getTitle()) &&
                    !greenChars.contains(alphabetPanels[i].getTitle())){
                alphabetPanels[i].setColor(Color.DARK_GRAY);
            }
        }

    }


    public void showNewGameButton(boolean show) {
        startButton.setVisible(show);
        repaint();
    }


    private class startListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            try {
                resetAllPanels();
            } catch (FileNotFoundException ex) {
                throw new RuntimeException(ex);
            }
            try {
                wordle.reset(wordle.loadFile());
            } catch (FileNotFoundException ex) {
                throw new RuntimeException(ex);
            }
            startButton.setVisible(false);
        }
    }

    private class KeyBoardListener implements KeyListener {
        @Override
        public void keyTyped(KeyEvent e) {
        }

        @Override
        public void keyPressed(KeyEvent e) {
            char ch = e.getKeyChar();
            if (Character.isLetter(ch) && guess.length() < wordle.getWord().length()) {
                guess += Character.toLowerCase(ch);
            }
            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                guess(guess);
                if(guess.length() == wordle.getWord().length() && wordle.checkGuess(guess)) {
                    guess = "";
                }
            }
            if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE && !guess.isEmpty()) {
                guess = guess.substring(0, guess.length() - 1);
            }
            setColorPanel(guess);
        }

        @Override
        public void keyReleased(KeyEvent e) {
        }
    }
}
